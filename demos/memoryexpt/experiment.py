"""Coordination chatroom game."""

import dallinger as dlgr
from dallinger.nodes import Source
import json
import random
from dallinger.models import Node


class CoordinationChatroom(dlgr.experiments.Experiment):
    """Define the structure of the experiment."""

    def __init__(self, session):
        """Initialize the experiment."""
        super(CoordinationChatroom, self).__init__(session)
        # for running an experiment with individuals three times
        # (also in config.txt, change to n = 1)
        #self.experiment_repeats = 4 #1
        #self.num_participants = dlgr.config.experiment_configuration.n
        #self.initial_recruitment_size = self.experiment_repeats #self.num_participants*2 #recruit more people than are needed for expt
        #self.quorum = self.num_participants
        #self.setup()

        # for normal experiment
        # (also in config.txt, change to n = whatever)
        self.experiment_repeats = 1
        self.num_participants = dlgr.config.experiment_configuration.n
        self.initial_recruitment_size = self.num_participants*3 #self.num_participants*2 #recruit more people than are needed for expt
        self.quorum = self.num_participants
        self.setup()

    def recruit(self):
        """Recruit one participant at a time until all networks are full."""
        pass

    def setup(self):
        """Setup the networks.

        Setup only does stuff if there are no networks, this is so it only
        runs once at the start of the experiment. It first calls the same
        function in the super (see experiments.py in dallinger). Then it adds a
        source to each network.
        """
        if not self.networks():
            super(CoordinationChatroom, self).setup()
            for net in self.networks():
                FreeRecallListSource(network=net)

    def create_network(self):
        """Create a new network by reading the configuration file."""
        class_ = getattr(
            dlgr.networks,
            dlgr.config.experiment_configuration.network
        )
        return class_(max_size=self.num_participants + 1)  # add a Source

    def bonus(self, participant):
        """Give the participant a bonus for waiting."""

        DOLLARS_PER_HOUR = 5.0
        t = participant.end_time - participant.creation_time

        # keep to two decimal points otherwise doesn't work
        return round(t.total_seconds()/3600 * DOLLARS_PER_HOUR, 2)

    def add_node_to_network(self, node, network):
        """Add node to the chain and receive transmissions."""
        network.add_node(node)
        source = network.nodes(type=Source)[0]  # find the source in the network
        source.connect(direction="to", whom=node)  # link up the source to the new node
        source.transmit(to_whom=node)  # in networks.py code, transmit info to the new node
        node.receive()  # new node receives everything

        if node.id == network.max_size:

            # here are all the edges that need to be connected
            # BABY_NETWORK:
            #all_edges = [(0, 1), (0, 2),(0, 3), (2, 3)]

            # KARATE CLUB:
                #"""KarateClub network.
                #
                #Data originally from: http://vlado.fmf.uni-lj.si/pub/networks/data/Ucinet/UciData.htm#zachary
                #
                #Formatting as described in:
                #https://networkx.github.io/documentation/networkx-1.9/examples/graph/karate_club.html
                #
                #An undirected, unweighted network showing connections between 34 members
                #of Zachary's karate club.
                #
                #Reference:
                #Zachary W. (1977).
                #An information flow model for conflict and fission in small groups.
                #Journal of Anthropological Research, 33, 452-473.
                #"""
            # here are all the edges that need to be connected
            #all_edges = [(0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8),
            #(0, 10), (0, 11), (0, 12), (0, 13), (0, 17), (0, 19), (0, 21), (0, 31), (1, 17),
            #(1, 2), (1, 3), (1, 21), (1, 19), (1, 7), (1, 13), (1, 30), (2, 3), (2, 32),
            #(2, 7), (2, 8), (2, 9), (2, 27), (2, 28), (2, 13), (3, 7), (3, 12), (3, 13), (4, 10),
            #(4, 6), (5, 16), (5, 10), (5, 6), (6, 16), (8, 32), (8, 30), (8, 33), (9, 33),
            #(13, 33), (14, 32), (14, 33), (15, 32), (15, 33), (18, 32), (18, 33), (19, 33),
            #(20, 32), (20, 33), (22, 32), (22, 33), (23, 32), (23, 25), (23, 27), (23, 29),
            #(23, 33), (24, 25), (24, 27), (24, 31), (25, 31), (26, 33), (26, 29), (27, 33),
            #(28, 33), (28, 31), (29, 32), (29, 33), (30, 33), (30, 32), (31, 32), (31, 33),
            #(32, 33)]

            # SMALL-WORLD
            #"""Small-world network.
            #Manually constructing networks based on getting the edges from
            #running python's NetworkX connected_watts_strogatz_graph(n, k, p) function
            #"""
            #all_edges = [(0, 32), (0, 1), (0, 2), (0, 33), (1, 33), (1, 3), (1, 8),
            #(2, 3), (2, 4), (3, 4), (3, 5), (4, 5), (4, 6), (5, 6), (5, 7), (6, 8),
            #(6, 7), (7, 8), (7, 9), (8, 9), (8, 26), (9, 23), (9, 10), (9, 11),
            #(10, 11), (10, 12), (11, 32), (11, 12), (12, 13), (12, 14), (13, 14),
            #(13, 15), (14, 16), (14, 15), (15, 16), (15, 28), (16, 17), (16, 18),
            #(17, 18), (17, 19), (18, 19), (18, 20), (19, 20), (19, 33), (20, 21),
            #(20, 22), (21, 22), (21, 23), (22, 24), (22, 23), (23, 25), (24, 25),
            #(24, 27), (25, 26), (25, 27), (26, 32), (26, 27), (26, 28), (27, 28),
            #(27, 29), (28, 29), (28, 30), (29, 30), (29, 31), (30, 32), (30, 31),
            #(31, 32), (31, 33)]

            # 2 all_edges = [(0, 1), (0, 2), (0, 22), (0, 33), (1, 33), (1, 2), (1, 3), (2, 3), (2, 4), (3, 5), (3, 33), (4, 5), (4, 6), (5, 6), (5, 7), (6, 8), (6, 7), (7, 8), (7, 9), (8, 9), (8, 10), (9, 10), (9, 11), (10, 11), (10, 12), (10, 15), (11, 17), (11, 19), (12, 13), (12, 14), (13, 14), (13, 15), (14, 16), (14, 15), (15, 17), (16, 17), (16, 18), (17, 18), (17, 19), (18, 19), (18, 20), (19, 20), (19, 21), (20, 21), (20, 22), (21, 32), (21, 22), (21, 23), (22, 23), (23, 24), (23, 25), (24, 25), (24, 26), (25, 26), (25, 27), (26, 27), (26, 28), (27, 28), (27, 29), (28, 29), (28, 30), (29, 30), (29, 31), (30, 32), (30, 31), (31, 32), (31, 33), (32, 33)]
            # 3 all_edges = [(0, 1), (0, 2), (0, 33), (1, 33), (1, 2), (1, 3), (2, 3), (2, 4), (2, 5), (3, 4), (3, 5), (4, 5), (4, 6), (5, 7), (6, 8), (6, 9), (6, 7), (7, 8), (7, 9), (8, 9), (8, 10), (9, 32), (10, 32), (10, 11), (10, 12), (11, 12), (11, 13), (12, 17), (12, 14), (13, 14), (13, 15), (14, 16), (14, 15), (15, 16), (15, 17), (16, 17), (16, 18), (17, 18), (17, 19), (18, 19), (18, 20), (19, 20), (19, 21), (20, 21), (20, 22), (21, 32), (21, 23), (22, 24), (22, 23), (23, 24), (23, 25), (24, 25), (24, 26), (25, 26), (25, 27), (26, 27), (26, 28), (27, 28), (27, 29), (28, 29), (28, 30), (29, 30), (29, 31), (30, 32), (30, 31), (31, 32), (31, 33), (32, 33)]
            # 4 all_edges = [(0, 32), (0, 2), (0, 20), (0, 33), (1, 2), (1, 3), (2, 3), (2, 4), (3, 4), (3, 5), (4, 5), (4, 30), (5, 6), (5, 7), (6, 8), (6, 7), (7, 8), (7, 9), (8, 9), (8, 10), (9, 32), (9, 10), (9, 11), (10, 11), (10, 20), (10, 25), (11, 12), (11, 15), (12, 21), (12, 14), (13, 14), (13, 15), (14, 16), (14, 15), (15, 16), (15, 17), (16, 17), (16, 18), (17, 18), (17, 19), (18, 20), (18, 21), (18, 22), (19, 20), (19, 21), (20, 21), (21, 23), (22, 26), (22, 23), (23, 24), (23, 25), (24, 25), (24, 26), (25, 26), (25, 27), (26, 27), (26, 28), (27, 28), (27, 29), (28, 29), (28, 30), (29, 30), (29, 31), (30, 32), (30, 33), (30, 31), (31, 32), (31, 33)]

            all_edges = [(0, 1), (0, 2), (0, 9), (0, 33), (1, 33), (1, 2), (1, 3), (2, 18), (2, 4), (3, 4), (3, 5), (3, 15), (4, 5), (4, 6), (5, 6), (5, 7), (6, 8), (6, 7), (7, 8), (7, 9), (8, 9), (8, 22), (9, 24), (9, 10), (10, 11), (10, 12), (11, 12), (11, 13), (11, 29), (12, 13), (12, 14), (13, 14), (13, 15), (14, 16), (14, 15), (15, 16), (16, 17), (16, 18), (17, 18), (17, 19), (18, 19), (18, 20), (19, 32), (19, 20), (19, 21), (20, 21), (20, 22), (21, 22), (21, 23), (22, 24), (22, 23), (23, 24), (23, 25), (24, 26), (25, 26), (25, 27), (26, 27), (26, 28), (27, 28), (27, 29), (28, 29), (28, 30), (29, 30), (30, 32), (30, 31), (31, 32), (31, 33), (32, 33)]
            # 6 all_edges = [(0, 32), (0, 1), (0, 2), (0, 33), (1, 33), (1, 2), (1, 3), (2, 3), (2, 4), (3, 5), (3, 29), (4, 5), (4, 6), (5, 6), (5, 7), (6, 21), (6, 7), (7, 8), (7, 9), (8, 9), (8, 10), (9, 23), (9, 10), (9, 11), (10, 11), (10, 12), (11, 12), (11, 13), (11, 15), (12, 13), (12, 14), (13, 14), (13, 15), (14, 16), (14, 15), (15, 16), (16, 17), (16, 18), (17, 18), (17, 19), (18, 19), (18, 20), (19, 20), (19, 21), (20, 21), (20, 22), (21, 22), (21, 23), (22, 24), (22, 23), (23, 24), (24, 25), (24, 26), (25, 26), (25, 27), (26, 27), (26, 28), (27, 28), (27, 29), (28, 29), (28, 30), (29, 33), (29, 30), (30, 32), (30, 31), (31, 32), (31, 33), (32, 33)]
            # 7 all_edges = [(0, 32), (0, 1), (0, 2), (0, 23), (0, 33), (1, 33), (1, 2), (1, 3), (1, 26), (2, 3), (2, 4), (3, 4), (3, 5), (4, 5), (4, 6), (5, 6), (5, 7), (6, 8), (6, 7), (7, 8), (7, 9), (8, 9), (8, 10), (9, 18), (9, 11), (10, 23), (10, 12), (10, 13), (11, 12), (11, 13), (12, 13), (12, 14), (13, 14), (14, 16), (14, 23), (15, 16), (15, 17), (16, 17), (16, 18), (17, 18), (17, 19), (18, 19), (18, 20), (19, 20), (19, 21), (20, 21), (20, 22), (21, 25), (21, 22), (21, 23), (22, 24), (22, 23), (23, 24), (24, 25), (24, 26), (25, 27), (26, 27), (27, 28), (27, 29), (28, 29), (28, 30), (29, 30), (29, 31), (30, 32), (30, 31), (31, 32), (31, 33), (32, 33)]
            # 8 all_edges = [(0, 32), (0, 2), (0, 7), (0, 33), (1, 33), (1, 2), (1, 3), (2, 3), (2, 4), (3, 5), (3, 31), (4, 5), (4, 6), (5, 6), (5, 7), (6, 16), (6, 7), (7, 23), (7, 8), (7, 10), (8, 9), (8, 10), (9, 10), (9, 11), (10, 11), (10, 12), (11, 12), (11, 13), (12, 13), (12, 14), (13, 14), (13, 15), (14, 16), (14, 15), (15, 16), (15, 17), (16, 17), (16, 18), (17, 18), (17, 19), (18, 19), (18, 27), (19, 20), (19, 21), (20, 30), (20, 21), (20, 22), (21, 22), (21, 23), (22, 24), (22, 23), (23, 25), (24, 25), (24, 26), (25, 26), (25, 27), (26, 27), (26, 28), (27, 28), (27, 29), (28, 29), (28, 30), (29, 30), (29, 31), (30, 32), (31, 32), (31, 33), (32, 33)]
            # 9 all_edges = [(0, 32), (0, 1), (0, 2), (0, 33), (1, 33), (1, 2), (1, 3), (1, 18), (2, 3), (2, 4), (3, 4), (3, 5), (4, 28), (4, 5), (4, 6), (5, 6), (5, 7), (6, 8), (6, 7), (7, 8), (7, 9), (7, 15), (8, 9), (8, 10), (8, 25), (9, 10), (9, 11), (10, 11), (10, 12), (10, 24), (11, 12), (11, 13), (12, 13), (12, 14), (13, 14), (13, 15), (14, 16), (14, 15), (15, 17), (16, 17), (16, 18), (17, 18), (17, 19), (18, 20), (19, 20), (19, 21), (20, 21), (20, 22), (21, 22), (21, 23), (22, 24), (22, 23), (23, 24), (23, 25), (24, 26), (25, 26), (26, 27), (26, 28), (27, 28), (27, 29), (28, 30), (29, 30), (29, 31), (30, 32), (30, 31), (31, 32), (31, 33), (32, 33)]
            # 10 all_edges = [(0, 32), (0, 1), (0, 2), (0, 33), (1, 2), (1, 3), (1, 31), (2, 3), (2, 4), (3, 4), (3, 5), (4, 28), (4, 5), (5, 25), (5, 6), (5, 7), (6, 8), (6, 7), (7, 8), (7, 9), (8, 9), (8, 10), (9, 10), (9, 11), (10, 11), (10, 12), (11, 12), (11, 13), (12, 33), (12, 14), (13, 14), (13, 15), (14, 16), (14, 15), (15, 16), (15, 17), (16, 17), (16, 18), (17, 18), (17, 19), (18, 19), (18, 20), (19, 20), (19, 21), (20, 21), (20, 22), (21, 22), (21, 23), (22, 24), (22, 23), (23, 24), (23, 25), (24, 25), (24, 26), (25, 26), (26, 27), (26, 28), (27, 28), (27, 29), (28, 29), (28, 30), (29, 30), (29, 31), (30, 32), (30, 33), (30, 31), (31, 32), (32, 33)]
            # 11 all_edges = [(0, 32), (0, 1), (0, 2), (0, 33), (1, 33), (1, 2), (1, 3), (2, 4), (2, 28), (3, 27), (3, 5), (4, 27), (4, 5), (5, 6), (5, 7), (6, 8), (6, 7), (7, 8), (7, 9), (8, 9), (8, 10), (9, 15), (9, 11), (10, 11), (10, 12), (11, 12), (11, 13), (12, 13), (12, 14), (13, 14), (13, 15), (14, 16), (14, 15), (15, 16), (15, 17), (16, 18), (16, 28), (16, 31), (17, 18), (17, 19), (17, 20), (18, 19), (18, 20), (19, 20), (19, 21), (20, 21), (21, 22), (21, 23), (22, 24), (22, 23), (23, 24), (23, 25), (24, 25), (24, 26), (25, 26), (25, 27), (26, 27), (26, 28), (27, 28), (27, 29), (28, 30), (29, 30), (29, 31), (30, 32), (30, 31), (31, 32), (31, 33), (32, 33)]
            # 12 all_edges = [(0, 32), (0, 1), (0, 2), (0, 33), (1, 33), (1, 2), (1, 3), (2, 10), (2, 4), (3, 18), (3, 4), (3, 5), (4, 5), (4, 6), (5, 6), (5, 7), (6, 8), (6, 7), (7, 8), (7, 9), (8, 9), (8, 10), (9, 10), (9, 11), (10, 12), (10, 14), (11, 12), (11, 13), (11, 23), (12, 13), (12, 14), (13, 30), (13, 15), (14, 33), (14, 23), (14, 15), (15, 16), (15, 17), (16, 17), (16, 29), (17, 18), (17, 19), (18, 20), (19, 20), (19, 21), (20, 21), (20, 22), (21, 22), (21, 23), (22, 24), (22, 23), (24, 25), (24, 26), (25, 26), (25, 27), (26, 27), (26, 28), (27, 28), (27, 29), (28, 29), (28, 30), (29, 33), (29, 31), (30, 32), (30, 31), (31, 32), (31, 33), (32, 33)]
            # 13 all_edges = [(0, 32), (0, 1), (0, 2), (0, 33), (1, 2), (1, 3), (2, 3), (2, 4), (3, 4), (3, 5), (4, 5), (4, 6), (5, 16), (5, 6), (5, 7), (6, 33), (6, 23), (6, 8), (6, 7), (7, 8), (7, 12), (8, 9), (8, 10), (9, 10), (9, 11), (10, 11), (10, 12), (11, 12), (11, 13), (11, 14), (12, 26), (12, 13), (13, 23), (13, 15), (14, 15), (15, 16), (15, 17), (16, 18), (17, 18), (17, 19), (18, 19), (18, 20), (19, 20), (19, 21), (20, 21), (20, 22), (21, 22), (21, 23), (22, 24), (22, 23), (23, 24), (24, 25), (24, 26), (25, 26), (25, 27), (26, 27), (26, 28), (27, 28), (27, 29), (28, 29), (28, 30), (29, 30), (29, 31), (30, 32), (30, 31), (31, 32), (31, 33), (32, 33)]
            # 14 all_edges = [(0, 1), (0, 33), (0, 23), (0, 25), (1, 33), (1, 2), (1, 3), (2, 4), (2, 21), (3, 32), (3, 4), (3, 5), (4, 5), (4, 6), (5, 6), (5, 7), (6, 8), (6, 28), (6, 7), (7, 8), (7, 9), (8, 9), (8, 10), (9, 10), (9, 11), (10, 11), (10, 23), (11, 12), (11, 13), (12, 33), (12, 19), (12, 13), (13, 32), (13, 29), (13, 15), (14, 16), (14, 30), (14, 15), (15, 16), (15, 17), (15, 28), (16, 17), (16, 18), (17, 18), (17, 19), (18, 19), (18, 20), (19, 26), (19, 21), (20, 21), (20, 22), (21, 22), (21, 23), (22, 24), (22, 23), (23, 25), (23, 27), (24, 25), (24, 26), (25, 26), (25, 27), (26, 27), (27, 28), (29, 30), (29, 31), (30, 31), (31, 32), (31, 33)]
            # 15 all_edges = [(0, 32), (0, 1), (0, 6), (0, 33), (1, 33), (1, 2), (1, 3), (2, 3), (2, 4), (3, 27), (3, 4), (3, 5), (4, 5), (4, 6), (5, 15), (5, 7), (6, 8), (6, 7), (7, 8), (7, 9), (8, 9), (8, 10), (9, 10), (9, 11), (10, 11), (10, 12), (11, 12), (11, 13), (12, 13), (12, 21), (13, 14), (13, 15), (14, 16), (14, 15), (15, 16), (15, 17), (16, 17), (16, 18), (17, 18), (17, 19), (18, 19), (18, 20), (19, 20), (19, 21), (20, 21), (20, 22), (21, 23), (21, 27), (22, 24), (22, 23), (23, 24), (23, 25), (24, 25), (24, 26), (25, 26), (25, 27), (26, 27), (26, 28), (27, 28), (28, 29), (28, 30), (29, 30), (29, 31), (30, 32), (30, 31), (31, 32), (31, 33), (32, 33)]
            # 16 all_edges = [(0, 32), (0, 2), (0, 14), (0, 33), (1, 2), (1, 18), (2, 3), (2, 15), (3, 33), (3, 4), (3, 5), (4, 5), (4, 6), (5, 33), (5, 6), (6, 8), (6, 26), (6, 7), (7, 8), (7, 9), (8, 10), (8, 21), (9, 10), (9, 11), (10, 11), (10, 12), (11, 13), (11, 30), (12, 13), (12, 14), (13, 14), (13, 15), (14, 16), (14, 15), (15, 17), (15, 21), (16, 17), (16, 18), (16, 19), (17, 18), (17, 19), (18, 19), (18, 20), (19, 21), (20, 21), (20, 22), (21, 22), (21, 23), (22, 24), (22, 23), (23, 24), (23, 25), (24, 25), (24, 26), (25, 26), (25, 27), (26, 27), (27, 28), (27, 29), (28, 29), (28, 30), (29, 30), (29, 31), (30, 32), (30, 31), (31, 32), (31, 33), (32, 33)]
            # 17 all_edges = [(0, 32), (0, 1), (0, 2), (0, 4), (0, 33), (1, 33), (1, 2), (1, 3), (1, 8), (2, 3), (2, 14), (3, 4), (3, 5), (4, 5), (5, 6), (5, 7), (6, 8), (6, 15), (6, 7), (7, 20), (7, 8), (7, 9), (7, 31), (8, 10), (9, 10), (9, 11), (10, 11), (10, 12), (11, 12), (11, 13), (12, 13), (12, 14), (13, 22), (13, 14), (13, 15), (14, 16), (14, 15), (15, 16), (15, 21), (16, 17), (16, 18), (17, 18), (17, 19), (18, 19), (18, 20), (19, 20), (19, 21), (20, 21), (21, 23), (22, 23), (23, 24), (23, 25), (24, 25), (24, 26), (25, 26), (25, 27), (26, 27), (26, 28), (27, 28), (27, 29), (28, 29), (28, 30), (29, 30), (29, 31), (30, 32), (30, 31), (31, 33), (32, 33)]
            # 18 all_edges = [(0, 32), (0, 1), (0, 2), (0, 33), (1, 33), (1, 2), (1, 3), (2, 3), (2, 4), (3, 4), (3, 7), (4, 5), (4, 6), (5, 6), (5, 7), (6, 8), (6, 7), (7, 8), (7, 9), (8, 9), (8, 10), (8, 31), (9, 10), (9, 11), (10, 11), (10, 12), (11, 12), (11, 13), (12, 13), (12, 14), (13, 31), (13, 14), (13, 15), (14, 16), (14, 15), (15, 16), (15, 17), (16, 17), (16, 18), (17, 18), (17, 19), (18, 19), (18, 20), (19, 20), (19, 21), (20, 21), (20, 22), (21, 22), (21, 23), (22, 24), (22, 23), (23, 24), (23, 25), (24, 25), (24, 26), (25, 26), (25, 27), (26, 27), (26, 28), (27, 28), (27, 29), (28, 29), (28, 30), (29, 30), (29, 31), (30, 32), (30, 31), (32, 33)]

            # walk through edges
            for edge in all_edges:
                node0 = Node.query.filter_by(id=edge[0]+2).one()
                node1 = Node.query.filter_by(id=edge[1]+2).one()
                node0.connect(direction="from", whom=node1) # connect backward
                node1.connect(direction="from", whom=node0) # connect forward

    #def info_post_request(self, node, info):
    #    """Run when a request to create an info is complete."""
    #    for agent in node.neighbors():
    #        node.transmit(what=info, to_whom=agent)

    def info_post_request(self, node, info):
        """Run when a request to create an info is complete."""
        """Transfer info to only one neighbor."""
        agent = random.choice(node.neighbors())
        node.transmit(what=info, to_whom=agent)

    def create_node(self, participant, network):
        """Create a node for a participant."""
        return dlgr.nodes.Agent(network=network, participant=participant)


class FreeRecallListSource(Source):
    """A Source that reads in a random list from a file and transmits it."""

    __mapper_args__ = {
        "polymorphic_identity": "free_recall_list_source"
    }

    def _contents(self):
        """Define the contents of new Infos.

        transmit() -> _what() -> create_information() -> _contents().
        """

        # randomly shuffles categories, randomly shuffles words in categories,
        # but presents lists by categories

        # load in the wordlists
        #wordlist = [
        #    "animals.md",
        #    "dwelling.md",
        #    "earth.md",
        #    "gardener.md",
        #    "profession.md",
        #    "reading.md"
        #]
        #full_wordlist = []

        #categ = list(range(6))  # walk through categories
        #random.shuffle(categ)
        #for x in categ:  # categories are randomly shuffled
        #    with open("static/stimuli/{}".format(wordlist[x]), "r") as f:
        #        wordlist_temp = f.read().splitlines()
        #        random.shuffle(wordlist_temp)  # words within categories are randomly shuffled
        #    full_wordlist.extend(wordlist_temp)  # add on words to the end
        #return json.dumps(full_wordlist)

        # shuffles all words

        wordlist = "60words.md" #random.choice(wordlists)
        with open("static/stimuli/{}".format(wordlist), "r") as f:
            wordlist =  f.read().splitlines()
        #    return json.dumps(random.sample(wordlist,60))
            random.shuffle(wordlist)
            return json.dumps(wordlist)
